Reverse: Use @deprecated to mark deprecated APIs for type checkers.

Upstream-Status: Inappropriate [oe specific]

Signed-off-by: Rob Woolley <rob.woolley@windriver.com>

From 53d776009030bda44bdd3c36ef39ffabe1a0e14c Mon Sep 17 00:00:00 2001
From: Michael Carlstrom <rmc@carlstrom.com>
Date: Fri, 1 Nov 2024 17:56:23 -0400
Subject: [PATCH] Use @deprecated to mark deprecated APIs for type checkers.
 (#1350)

* use @deprecated

Signed-off-by: Michael Carlstrom <rmc@carlstrom.com>

* move typing_extensions

Signed-off-by: Michael Carlstrom <rmc@carlstrom.com>

* Add deprecated to declare_parameters

Signed-off-by: Michael Carlstrom <rmc@carlstrom.com>

---------

Signed-off-by: Michael Carlstrom <rmc@carlstrom.com>
Co-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>
---
 package.xml                     |    1 -
 rclpy/clock.py                  |    7 +++++--
 rclpy/event_handler.py          |   10 +++++-----
 rclpy/impl/rcutils_logger.py    |   10 ++++++++--
 rclpy/node.py                   |   50 +-------------------------------------------------
 rclpy/qos.py                    |    8 +++++---
 rclpy/qos_overriding_options.py |    4 ++--
 rclpy/waitable.py               |    1 +
 8 files changed, 27 insertions(+), 64 deletions(-)

Index: git/package.xml
===================================================================
--- git.orig/package.xml
+++ git/package.xml
@@ -38,7 +38,6 @@
   <exec_depend>action_msgs</exec_depend>
   <exec_depend>ament_index_python</exec_depend>
   <exec_depend>builtin_interfaces</exec_depend>
-  <exec_depend>python3-typing-extensions</exec_depend>
   <exec_depend>python3-yaml</exec_depend>
   <exec_depend>rosgraph_msgs</exec_depend>
   <exec_depend>rpyutils</exec_depend>
Index: git/rclpy/clock.py
===================================================================
--- git.orig/rclpy/clock.py
+++ git/rclpy/clock.py
@@ -17,7 +17,6 @@ from types import TracebackType
 from typing import Callable, Optional, Type, TYPE_CHECKING, TypedDict
 
 from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
-from typing_extensions import TypeAlias
 
 from .clock_type import ClockType
 from .context import Context
@@ -27,6 +26,10 @@ from .time import Time
 from .utilities import get_default_context
 
 
+if TYPE_CHECKING:
+    from typing import TypeAlias
+
+
 class ClockChange(IntEnum):
     ROS_TIME_NO_CHANGE = _rclpy.ClockChange.ROS_TIME_NO_CHANGE
     ROS_TIME_ACTIVATED = _rclpy.ClockChange.ROS_TIME_ACTIVATED
@@ -87,7 +90,7 @@ class TimeJumpDictionary(TypedDict):
     delta: int
 
 
-JumpHandlePreCallbackType: TypeAlias = Callable[[], None]
+JumpHandlePreCallbackType: 'TypeAlias' = Callable[[], None]
 
 
 class JumpHandle:
Index: git/rclpy/event_handler.py
===================================================================
--- git.orig/rclpy/event_handler.py
+++ git/rclpy/event_handler.py
@@ -17,6 +17,7 @@ from typing import Any
 from typing import Callable
 from typing import List
 from typing import Optional
+from typing import TYPE_CHECKING
 import warnings
 
 import rclpy
@@ -26,8 +27,9 @@ from rclpy.logging import get_logger
 from rclpy.qos import qos_policy_name_from_kind
 from rclpy.waitable import NumberOfEntities
 from rclpy.waitable import Waitable
-from typing_extensions import deprecated
-from typing_extensions import TypeAlias
+
+if TYPE_CHECKING:
+    from typing import TypeAlias
 
 
 QoSPublisherEventType = _rclpy.rcl_publisher_event_type_t
@@ -73,7 +75,7 @@ IncompatibleTypeInfo = _rclpy.rmw_incomp
 UnsupportedEventTypeError = _rclpy.UnsupportedEventTypeError
 
 
-EventHandlerData: TypeAlias = Optional[Any]
+EventHandlerData: 'TypeAlias' = Optional[Any]
 
 
 class EventHandler(Waitable[EventHandlerData]):
@@ -142,8 +144,6 @@ class EventHandler(Waitable[EventHandler
         self.__event.destroy_when_not_in_use()
 
 
-@deprecated('QoSEventHandler foo is deprecated, use EventHandler instead.',
-            category=DeprecationWarning, stacklevel=2)
 class QoSEventHandler(EventHandler):
 
     def __init_subclass__(cls, **kwargs):
Index: git/rclpy/impl/rcutils_logger.py
===================================================================
--- git.orig/rclpy/impl/rcutils_logger.py
+++ git/rclpy/impl/rcutils_logger.py
@@ -12,8 +12,10 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+from contextlib import suppress
 import inspect
 import os
+import sys
 from types import FrameType
 from typing import cast
 from typing import ClassVar
@@ -31,7 +33,12 @@ from typing import Union
 from rclpy.clock import Clock
 from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
 from rclpy.impl.logging_severity import LoggingSeverity
-from typing_extensions import deprecated, Unpack
+
+if sys.version_info >= (3, 12):
+    from typing import Unpack
+else:
+    with suppress(ModuleNotFoundError):
+        from typing_extensions import Unpack
 
 
 SupportedFiltersKeys = Literal['throttle', 'skip_first', 'once']
@@ -423,7 +430,6 @@ class RcutilsLogger:
         """Log a message with `WARN` severity via :py:classmethod:RcutilsLogger.log:."""
         return self.log(message, LoggingSeverity.WARN, **kwargs)
 
-    @deprecated('Deprecated in favor of :py:classmethod:RcutilsLogger.warning:.')
     def warn(self, message: str, **kwargs: 'Unpack[LoggingArgs]') -> bool:
         """
         Log a message with `WARN` severity via :py:classmethod:RcutilsLogger.log:.
Index: git/rclpy/node.py
===================================================================
--- git.orig/rclpy/node.py
+++ git/rclpy/node.py
@@ -99,8 +99,6 @@ from rclpy.validate_node_name import val
 from rclpy.validate_parameter_name import validate_parameter_name
 from rclpy.validate_topic_name import validate_topic_name
 from rclpy.waitable import Waitable
-from typing_extensions import deprecated
-
 
 HIDDEN_NODE_PREFIX = '_'
 
@@ -378,22 +376,10 @@ class Node:
                           ) -> Parameter[AllowableParameterValueT]: ...
 
     @overload
-    @deprecated('when declaring a parameter only providing its name is deprecated. '
-                'You have to either:\n'
-                '\t- Pass a name and a default value different to "PARAMETER NOT SET"'
-                ' (and optionally a descriptor).\n'
-                '\t- Pass a name and a parameter type.\n'
-                '\t- Pass a name and a descriptor with `dynamic_typing=True')
-    def declare_parameter(self, name: str,
-                          value: None = None,
-                          descriptor: None = None,
-                          ignore_override: bool = False) -> Parameter[Any]: ...
-
-    @overload
     def declare_parameter(self, name: str,
                           value: Union[None, Parameter.Type, ParameterValue] = None,
                           descriptor: Optional[ParameterDescriptor] = None,
-                          ignore_override: bool = False) -> Parameter[Any]: ...
+                          ignore_override: bool = False) -> Parameter[None]: ...
 
     def declare_parameter(
         self,
@@ -431,13 +417,6 @@ class Node:
             args = (name, value, descriptor)
         return self.declare_parameters('', [args], ignore_override)[0]
 
-    @overload
-    @deprecated('when declaring a parameter only providing its name is deprecated. '
-                'You have to either:\n'
-                '\t- Pass a name and a default value different to "PARAMETER NOT SET"'
-                ' (and optionally a descriptor).\n'
-                '\t- Pass a name and a parameter type.\n'
-                '\t- Pass a name and a descriptor with `dynamic_typing=True')
     def declare_parameters(
         self,
         namespace: str,
@@ -448,33 +427,6 @@ class Node:
                   ParameterDescriptor],
         ]],
         ignore_override: bool = False
-    ) -> List[Parameter[Any]]: ...
-
-    @overload
-    def declare_parameters(
-        self,
-        namespace: str,
-        parameters: List[Union[
-            Tuple[str, Parameter.Type],
-            Tuple[str, Union[AllowableParameterValue, Parameter.Type, ParameterValue],
-                  ParameterDescriptor],
-        ]],
-        ignore_override: bool = False
-    ) -> List[Parameter[Any]]: ...
-
-    def declare_parameters(
-        self,
-        namespace: str,
-        parameters: Union[List[Union[
-            Tuple[str],
-            Tuple[str, Parameter.Type],
-            Tuple[str, Union[AllowableParameterValue, Parameter.Type, ParameterValue],
-                  ParameterDescriptor]]],
-                  List[Union[
-            Tuple[str, Parameter.Type],
-            Tuple[str, Union[AllowableParameterValue, Parameter.Type, ParameterValue],
-                  ParameterDescriptor]]]],
-        ignore_override: bool = False
     ) -> List[Parameter[Any]]:
         """
         Declare a list of parameters.
Index: git/rclpy/qos_overriding_options.py
===================================================================
--- git.orig/rclpy/qos_overriding_options.py
+++ git/rclpy/qos_overriding_options.py
@@ -36,9 +36,9 @@ from rclpy.qos import QoSPolicyKind
 from rclpy.qos import QoSProfile
 from rclpy.qos import QoSReliabilityPolicy
 from rclpy.subscription import Subscription
-from typing_extensions import TypeAlias
 
 if TYPE_CHECKING:
+    from typing import TypeAlias
     from rclpy.node import Node
 
 
@@ -47,7 +47,7 @@ class InvalidQosOverridesError(Exception
 
 
 # Return type of qos validation callbacks
-QosCallbackResult: TypeAlias = SetParametersResult
+QosCallbackResult: 'TypeAlias' = SetParametersResult
 # Qos callback type annotation
 QosCallbackType = Callable[[QoSProfile], QosCallbackResult]
 
Index: git/rclpy/qos.py
===================================================================
--- git.orig/rclpy/qos.py
+++ git/rclpy/qos.py
@@ -13,13 +13,15 @@
 # limitations under the License.
 
 from enum import Enum, IntEnum
-from typing import (Callable, Iterable, List, Optional, Tuple, Type,
+from typing import (Callable, Iterable, List, Optional, Tuple, Type, TYPE_CHECKING,
                     TypeVar, Union)
 import warnings
 
 from rclpy.duration import Duration
 from rclpy.impl.implementation_singleton import rclpy_implementation as _rclpy
-from typing_extensions import TypeAlias
+
+if TYPE_CHECKING:
+    from typing import TypeAlias
 
 
 class QoSPolicyKind(IntEnum):
@@ -514,7 +516,7 @@ class QoSPresetProfiles(Enum):
         return cls[name.upper()].value
 
 
-QoSCompatibility: TypeAlias = _rclpy.QoSCompatibility
+QoSCompatibility: 'TypeAlias' = _rclpy.QoSCompatibility
 
 
 def qos_check_compatible(publisher_qos: QoSProfile,
Index: git/rclpy/waitable.py
===================================================================
--- git.orig/rclpy/waitable.py
+++ git/rclpy/waitable.py
@@ -20,6 +20,7 @@ from rclpy.impl.implementation_singleton
 
 T = TypeVar('T')
 
+
 if TYPE_CHECKING:
     from typing_extensions import Self
 
